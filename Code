#importing the dependencies
import numpy as np
import pandas as pd
import difflib
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

#data collection and preprocessing

#loading the data from csv to pandas dataframe
movies_data = pd.read_csv('/kaggle/input/movies/movies.csv')

movies_data.head()

movies_data.info()

#feature selection - selection the relevent features for recommendation
#selected_features = ['genres','keywords','original_title','overview','popularity','tagline','vote_average','vote_count','cast','director']
selected_features = ['genres','keywords','overview','tagline','cast','director']

#replacing the null values will null string

for feature in selected_features:
    movies_data[feature] = movies_data[feature].fillna('')

#combining all the features
combined_features = movies_data['genres']+movies_data['keywords']+movies_data['overview']+movies_data['tagline']++movies_data['cast']+movies_data['director']
#combined_features =[]
#for feature in selected_features:
#    combined_features += movies_data[feature]
    
print (combined_features)

#converting the text data to feature vectors
vectorizer = TfidfVectorizer()

feature_vectors = vectorizer.fit_transform(combined_features)

#Cosine similariy - getting the similarity score
similarity = cosine_similarity(feature_vectors)
print(similarity)

print(similarity.shape)

movie_name = input('Enter your favorite movie name: ')
list_of_all_titles = movies_data['title'].tolist()
find_close_match = difflib.get_close_matches(movie_name, list_of_all_titles)
close_match = find_close_match[0]
index_movie = movies_data[movies_data.title == close_match]['index'].values[0]
similarity_score = list(enumerate(similarity[index_movie]))
sorted_similar_movies = sorted(similarity_score, key = lambda x:x[1], reverse = True)

print ('Movies suggested for you \n')
i=0
for movie in sorted_similar_movies:
    index = movie[0]
    title_from_index = movies_data[movies_data.index == index]['title'].values[0]
    Rating = movies_data[movies_data.index == index]['vote_average'].values[0]
    if (0 < i < 11):
        print (i, '-', title_from_index,',','Rated :', Rating)
    i+=1
